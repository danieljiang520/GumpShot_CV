
GumpShot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e4c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003084  08003084  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800308c  0800308c  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800308c  0800308c  0001308c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003094  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000001c  080030b0  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080030b0  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3b9  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a67  00000000  00000000  0002c405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  0002de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c70  00000000  00000000  0002eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000197b  00000000  00000000  0002f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e04e  00000000  00000000  0003117b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089a6d  00000000  00000000  0003f1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8c36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003818  00000000  00000000  000c8c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002fc8 	.word	0x08002fc8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08002fc8 	.word	0x08002fc8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 80004e2:	4a38      	ldr	r2, [pc, #224]	; (80005c4 <HD44780_Init+0xec>)
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 80004e8:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <HD44780_Init+0xf0>)
 80004ea:	2208      	movs	r2, #8
 80004ec:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80004ee:	4b37      	ldr	r3, [pc, #220]	; (80005cc <HD44780_Init+0xf4>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 80004f4:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <HD44780_Init+0xec>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d907      	bls.n	800050c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 80004fc:	4b33      	ldr	r3, [pc, #204]	; (80005cc <HD44780_Init+0xf4>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	f043 0308 	orr.w	r3, r3, #8
 8000504:	b2da      	uxtb	r2, r3
 8000506:	4b31      	ldr	r3, [pc, #196]	; (80005cc <HD44780_Init+0xf4>)
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e006      	b.n	800051a <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800050c:	4b2f      	ldr	r3, [pc, #188]	; (80005cc <HD44780_Init+0xf4>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b2d      	ldr	r3, [pc, #180]	; (80005cc <HD44780_Init+0xf4>)
 8000518:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800051a:	f000 f9af 	bl	800087c <DelayInit>
  HAL_Delay(50);
 800051e:	2032      	movs	r0, #50	; 0x32
 8000520:	f000 fdc6 	bl	80010b0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000524:	4b28      	ldr	r3, [pc, #160]	; (80005c8 <HD44780_Init+0xf0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4618      	mov	r0, r3
 800052a:	f000 f96d 	bl	8000808 <ExpanderWrite>
  HAL_Delay(1000);
 800052e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000532:	f000 fdbd 	bl	80010b0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000536:	2030      	movs	r0, #48	; 0x30
 8000538:	f000 f955 	bl	80007e6 <Write4Bits>
  DelayUS(4500);
 800053c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000540:	f000 f9c6 	bl	80008d0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000544:	2030      	movs	r0, #48	; 0x30
 8000546:	f000 f94e 	bl	80007e6 <Write4Bits>
  DelayUS(4500);
 800054a:	f241 1094 	movw	r0, #4500	; 0x1194
 800054e:	f000 f9bf 	bl	80008d0 <DelayUS>

  Write4Bits(0x03 << 4);
 8000552:	2030      	movs	r0, #48	; 0x30
 8000554:	f000 f947 	bl	80007e6 <Write4Bits>
  DelayUS(4500);
 8000558:	f241 1094 	movw	r0, #4500	; 0x1194
 800055c:	f000 f9b8 	bl	80008d0 <DelayUS>

  Write4Bits(0x02 << 4);
 8000560:	2020      	movs	r0, #32
 8000562:	f000 f940 	bl	80007e6 <Write4Bits>
  DelayUS(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 f9b2 	bl	80008d0 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <HD44780_Init+0xf4>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f8f8 	bl	800076c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800057c:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <HD44780_Init+0xf8>)
 800057e:	2204      	movs	r2, #4
 8000580:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000582:	f000 f875 	bl	8000670 <HD44780_Display>
  HD44780_Clear();
 8000586:	f000 f82b 	bl	80005e0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HD44780_Init+0xfc>)
 800058c:	2202      	movs	r2, #2
 800058e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <HD44780_Init+0xfc>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	f043 0304 	orr.w	r3, r3, #4
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f8e6 	bl	800076c <SendCommand>
  DelayUS(4500);
 80005a0:	f241 1094 	movw	r0, #4500	; 0x1194
 80005a4:	f000 f994 	bl	80008d0 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80005a8:	490b      	ldr	r1, [pc, #44]	; (80005d8 <HD44780_Init+0x100>)
 80005aa:	2000      	movs	r0, #0
 80005ac:	f000 f876 	bl	800069c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80005b0:	490a      	ldr	r1, [pc, #40]	; (80005dc <HD44780_Init+0x104>)
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 f872 	bl	800069c <HD44780_CreateSpecialChar>

  HD44780_Home();
 80005b8:	f000 f81d 	bl	80005f6 <HD44780_Home>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000003b 	.word	0x2000003b
 80005c8:	2000003c 	.word	0x2000003c
 80005cc:	20000038 	.word	0x20000038
 80005d0:	20000039 	.word	0x20000039
 80005d4:	2000003a 	.word	0x2000003a
 80005d8:	20000000 	.word	0x20000000
 80005dc:	20000008 	.word	0x20000008

080005e0 <HD44780_Clear>:

void HD44780_Clear()
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f000 f8c1 	bl	800076c <SendCommand>
  DelayUS(2000);
 80005ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ee:	f000 f96f 	bl	80008d0 <DelayUS>
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <HD44780_Home>:

void HD44780_Home()
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 f8b6 	bl	800076c <SendCommand>
  DelayUS(2000);
 8000600:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000604:	f000 f964 	bl	80008d0 <DelayUS>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}

0800060c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <HD44780_SetCursor+0x5c>)
 800061e:	f107 0408 	add.w	r4, r7, #8
 8000622:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000624:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <HD44780_SetCursor+0x60>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	79ba      	ldrb	r2, [r7, #6]
 800062e:	429a      	cmp	r2, r3
 8000630:	d303      	bcc.n	800063a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <HD44780_SetCursor+0x60>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800063a:	79bb      	ldrb	r3, [r7, #6]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3318      	adds	r3, #24
 8000640:	443b      	add	r3, r7
 8000642:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	4413      	add	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	b25b      	sxtb	r3, r3
 8000650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000654:	b25b      	sxtb	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	4618      	mov	r0, r3
 800065a:	f000 f887 	bl	800076c <SendCommand>
}
 800065e:	bf00      	nop
 8000660:	371c      	adds	r7, #28
 8000662:	46bd      	mov	sp, r7
 8000664:	bd90      	pop	{r4, r7, pc}
 8000666:	bf00      	nop
 8000668:	08002fe0 	.word	0x08002fe0
 800066c:	2000003b 	.word	0x2000003b

08000670 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000674:	4b08      	ldr	r3, [pc, #32]	; (8000698 <HD44780_Display+0x28>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	b2da      	uxtb	r2, r3
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HD44780_Display+0x28>)
 8000680:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HD44780_Display+0x28>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	b2db      	uxtb	r3, r3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 f86d 	bl	800076c <SendCommand>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000039 	.word	0x20000039

0800069c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	6039      	str	r1, [r7, #0]
 80006a6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	b25b      	sxtb	r3, r3
 80006b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f854 	bl	800076c <SendCommand>
  for (int i=0; i<8; i++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	e009      	b.n	80006de <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	683a      	ldr	r2, [r7, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 f858 	bl	8000788 <SendChar>
  for (int i=0; i<8; i++)
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	3301      	adds	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	2b07      	cmp	r3, #7
 80006e2:	ddf2      	ble.n	80006ca <HD44780_CreateSpecialChar+0x2e>
  }
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b082      	sub	sp, #8
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 80006f6:	e006      	b.n	8000706 <HD44780_PrintStr+0x18>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	1c5a      	adds	r2, r3, #1
 80006fc:	607a      	str	r2, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f000 f841 	bl	8000788 <SendChar>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f4      	bne.n	80006f8 <HD44780_PrintStr+0xa>
}
 800070e:	bf00      	nop
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <HD44780_SetBacklight>:

void HD44780_SetBacklight(uint8_t new_val)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
  if(new_val) HD44780_Backlight();
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d002      	beq.n	800072e <HD44780_SetBacklight+0x16>
 8000728:	f000 f814 	bl	8000754 <HD44780_Backlight>
  else HD44780_NoBacklight();
}
 800072c:	e001      	b.n	8000732 <HD44780_SetBacklight+0x1a>
  else HD44780_NoBacklight();
 800072e:	f000 f805 	bl	800073c <HD44780_NoBacklight>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <HD44780_NoBacklight>:

void HD44780_NoBacklight(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8000740:	4b03      	ldr	r3, [pc, #12]	; (8000750 <HD44780_NoBacklight+0x14>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f85e 	bl	8000808 <ExpanderWrite>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000003c 	.word	0x2000003c

08000754 <HD44780_Backlight>:

void HD44780_Backlight(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <HD44780_Backlight+0x14>)
 800075a:	2208      	movs	r2, #8
 800075c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800075e:	2000      	movs	r0, #0
 8000760:	f000 f852 	bl	8000808 <ExpanderWrite>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	2000003c 	.word	0x2000003c

0800076c <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f812 	bl	80007a4 <Send>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f000 f804 	bl	80007a4 <Send>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	460a      	mov	r2, r1
 80007ae:	71fb      	strb	r3, [r7, #7]
 80007b0:	4613      	mov	r3, r2
 80007b2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f023 030f 	bic.w	r3, r3, #15
 80007ba:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80007c2:	7bfa      	ldrb	r2, [r7, #15]
 80007c4:	79bb      	ldrb	r3, [r7, #6]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f80b 	bl	80007e6 <Write4Bits>
  Write4Bits((lownib)|mode);
 80007d0:	7bba      	ldrb	r2, [r7, #14]
 80007d2:	79bb      	ldrb	r3, [r7, #6]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f804 	bl	80007e6 <Write4Bits>
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 f808 	bl	8000808 <ExpanderWrite>
  PulseEnable(value);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f820 	bl	8000840 <PulseEnable>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af02      	add	r7, sp, #8
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <ExpanderWrite+0x30>)
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4313      	orrs	r3, r2
 800081a:	b2db      	uxtb	r3, r3
 800081c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800081e:	f107 020f 	add.w	r2, r7, #15
 8000822:	230a      	movs	r3, #10
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2301      	movs	r3, #1
 8000828:	214e      	movs	r1, #78	; 0x4e
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <ExpanderWrite+0x34>)
 800082c:	f001 f82c 	bl	8001888 <HAL_I2C_Master_Transmit>
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000003c 	.word	0x2000003c
 800083c:	20000040 	.word	0x20000040

08000840 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	4603      	mov	r3, r0
 8000848:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	b2db      	uxtb	r3, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ffd8 	bl	8000808 <ExpanderWrite>
  DelayUS(20);
 8000858:	2014      	movs	r0, #20
 800085a:	f000 f839 	bl	80008d0 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	f023 0304 	bic.w	r3, r3, #4
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff ffce 	bl	8000808 <ExpanderWrite>
  DelayUS(20);
 800086c:	2014      	movs	r0, #20
 800086e:	f000 f82f 	bl	80008d0 <DelayUS>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <DelayInit>:

static void DelayInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <DelayInit+0x4c>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <DelayInit+0x4c>)
 8000886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800088a:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800088c:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <DelayInit+0x4c>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <DelayInit+0x4c>)
 8000892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000896:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <DelayInit+0x50>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <DelayInit+0x50>)
 800089e:	f023 0301 	bic.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <DelayInit+0x50>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <DelayInit+0x50>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <DelayInit+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80008b6:	bf00      	nop
  __ASM volatile ("NOP");
 80008b8:	bf00      	nop
  __ASM volatile ("NOP");
 80008ba:	bf00      	nop
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000edf0 	.word	0xe000edf0
 80008cc:	e0001000 	.word	0xe0001000

080008d0 <DelayUS>:

static void DelayUS(uint32_t us) {
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <DelayUS+0x44>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <DelayUS+0x48>)
 80008de:	fba2 2303 	umull	r2, r3, r2, r3
 80008e2:	0c9a      	lsrs	r2, r3, #18
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	fb02 f303 	mul.w	r3, r2, r3
 80008ea:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <DelayUS+0x4c>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <DelayUS+0x4c>)
 80008f4:	685a      	ldr	r2, [r3, #4]
 80008f6:	693b      	ldr	r3, [r7, #16]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	429a      	cmp	r2, r3
 8000902:	d8f6      	bhi.n	80008f2 <DelayUS+0x22>
}
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	371c      	adds	r7, #28
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000010 	.word	0x20000010
 8000918:	431bde83 	.word	0x431bde83
 800091c:	e0001000 	.word	0xe0001000

08000920 <lcd_display>:

void lcd_display(uint8_t mode, uint16_t freq, uint16_t speed, uint16_t direction) {
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b089      	sub	sp, #36	; 0x24
 8000924:	af00      	add	r7, sp, #0
 8000926:	4604      	mov	r4, r0
 8000928:	4608      	mov	r0, r1
 800092a:	4611      	mov	r1, r2
 800092c:	461a      	mov	r2, r3
 800092e:	4623      	mov	r3, r4
 8000930:	71fb      	strb	r3, [r7, #7]
 8000932:	4603      	mov	r3, r0
 8000934:	80bb      	strh	r3, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	807b      	strh	r3, [r7, #2]
 800093a:	4613      	mov	r3, r2
 800093c:	803b      	strh	r3, [r7, #0]
	HD44780_Clear();
 800093e:	f7ff fe4f 	bl	80005e0 <HD44780_Clear>
	HD44780_SetCursor(2, 0);
 8000942:	2100      	movs	r1, #0
 8000944:	2002      	movs	r0, #2
 8000946:	f7ff fe61 	bl	800060c <HD44780_SetCursor>
	HD44780_PrintStr("Mode: ");
 800094a:	482f      	ldr	r0, [pc, #188]	; (8000a08 <lcd_display+0xe8>)
 800094c:	f7ff fecf 	bl	80006ee <HD44780_PrintStr>
	if(mode == 0) {
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <lcd_display+0x3e>
		HD44780_PrintStr("Manual");
 8000956:	482d      	ldr	r0, [pc, #180]	; (8000a0c <lcd_display+0xec>)
 8000958:	f7ff fec9 	bl	80006ee <HD44780_PrintStr>
 800095c:	e010      	b.n	8000980 <lcd_display+0x60>
	} else if(mode == 1) {
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d103      	bne.n	800096c <lcd_display+0x4c>
		HD44780_PrintStr("Easy");
 8000964:	482a      	ldr	r0, [pc, #168]	; (8000a10 <lcd_display+0xf0>)
 8000966:	f7ff fec2 	bl	80006ee <HD44780_PrintStr>
 800096a:	e009      	b.n	8000980 <lcd_display+0x60>
	} else if(mode == 2) {
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d103      	bne.n	800097a <lcd_display+0x5a>
		HD44780_PrintStr("Medium");
 8000972:	4828      	ldr	r0, [pc, #160]	; (8000a14 <lcd_display+0xf4>)
 8000974:	f7ff febb 	bl	80006ee <HD44780_PrintStr>
 8000978:	e002      	b.n	8000980 <lcd_display+0x60>
	} else {
		HD44780_PrintStr("Hard");
 800097a:	4827      	ldr	r0, [pc, #156]	; (8000a18 <lcd_display+0xf8>)
 800097c:	f7ff feb7 	bl	80006ee <HD44780_PrintStr>
	}

	char sfreq[5];
	HD44780_SetCursor(2, 1);
 8000980:	2101      	movs	r1, #1
 8000982:	2002      	movs	r0, #2
 8000984:	f7ff fe42 	bl	800060c <HD44780_SetCursor>
	HD44780_PrintStr("Frequency: ");
 8000988:	4824      	ldr	r0, [pc, #144]	; (8000a1c <lcd_display+0xfc>)
 800098a:	f7ff feb0 	bl	80006ee <HD44780_PrintStr>
	itoa(freq, sfreq, 10);
 800098e:	88bb      	ldrh	r3, [r7, #4]
 8000990:	f107 0118 	add.w	r1, r7, #24
 8000994:	220a      	movs	r2, #10
 8000996:	4618      	mov	r0, r3
 8000998:	f002 faca 	bl	8002f30 <itoa>
	HD44780_PrintStr(sfreq);
 800099c:	f107 0318 	add.w	r3, r7, #24
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fea4 	bl	80006ee <HD44780_PrintStr>

	char sspeed[5];
	HD44780_SetCursor(2, 2);
 80009a6:	2102      	movs	r1, #2
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fe2f 	bl	800060c <HD44780_SetCursor>
	HD44780_PrintStr("Speed: ");
 80009ae:	481c      	ldr	r0, [pc, #112]	; (8000a20 <lcd_display+0x100>)
 80009b0:	f7ff fe9d 	bl	80006ee <HD44780_PrintStr>
	itoa(speed, sspeed, 10);
 80009b4:	887b      	ldrh	r3, [r7, #2]
 80009b6:	f107 0110 	add.w	r1, r7, #16
 80009ba:	220a      	movs	r2, #10
 80009bc:	4618      	mov	r0, r3
 80009be:	f002 fab7 	bl	8002f30 <itoa>
	HD44780_PrintStr(sspeed);
 80009c2:	f107 0310 	add.w	r3, r7, #16
 80009c6:	4618      	mov	r0, r3
 80009c8:	f7ff fe91 	bl	80006ee <HD44780_PrintStr>
	HD44780_PrintStr(" units");
 80009cc:	4815      	ldr	r0, [pc, #84]	; (8000a24 <lcd_display+0x104>)
 80009ce:	f7ff fe8e 	bl	80006ee <HD44780_PrintStr>

  char sdirection[5];
  HD44780_SetCursor(0, 3);
 80009d2:	2103      	movs	r1, #3
 80009d4:	2000      	movs	r0, #0
 80009d6:	f7ff fe19 	bl	800060c <HD44780_SetCursor>
  HD44780_PrintStr("Direction: ");
 80009da:	4813      	ldr	r0, [pc, #76]	; (8000a28 <lcd_display+0x108>)
 80009dc:	f7ff fe87 	bl	80006ee <HD44780_PrintStr>
  itoa(direction, sdirection, 10);
 80009e0:	883b      	ldrh	r3, [r7, #0]
 80009e2:	f107 0108 	add.w	r1, r7, #8
 80009e6:	220a      	movs	r2, #10
 80009e8:	4618      	mov	r0, r3
 80009ea:	f002 faa1 	bl	8002f30 <itoa>
  HD44780_PrintStr(sdirection);
 80009ee:	f107 0308 	add.w	r3, r7, #8
 80009f2:	4618      	mov	r0, r3
 80009f4:	f7ff fe7b 	bl	80006ee <HD44780_PrintStr>
	HD44780_PrintStr(" º");  
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <lcd_display+0x10c>)
 80009fa:	f7ff fe78 	bl	80006ee <HD44780_PrintStr>
}
 80009fe:	bf00      	nop
 8000a00:	3724      	adds	r7, #36	; 0x24
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	bf00      	nop
 8000a08:	08002ff0 	.word	0x08002ff0
 8000a0c:	08002ff8 	.word	0x08002ff8
 8000a10:	08003000 	.word	0x08003000
 8000a14:	08003008 	.word	0x08003008
 8000a18:	08003010 	.word	0x08003010
 8000a1c:	08003018 	.word	0x08003018
 8000a20:	08003024 	.word	0x08003024
 8000a24:	0800302c 	.word	0x0800302c
 8000a28:	08003034 	.word	0x08003034
 8000a2c:	08003040 	.word	0x08003040

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f000 fac9 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f81d 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f000 f90f 	bl	8000c60 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000a42:	f000 f8b3 	bl	8000bac <MX_TIM3_Init>
  MX_I2C1_Init();
 8000a46:	f000 f883 	bl	8000b50 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HD44780_Init(4);
 8000a4a:	2004      	movs	r0, #4
 8000a4c:	f7ff fd44 	bl	80004d8 <HD44780_Init>
  HD44780_Clear();
 8000a50:	f7ff fdc6 	bl	80005e0 <HD44780_Clear>
  HD44780_SetBacklight(5);
 8000a54:	2005      	movs	r0, #5
 8000a56:	f7ff fe5f 	bl	8000718 <HD44780_SetBacklight>

  uint8_t mode = 1; // mode: 0 = manual, 1 = easy, 2 = hard
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	71fb      	strb	r3, [r7, #7]
  uint16_t freq = 5; // frequency (s):
 8000a5e:	2305      	movs	r3, #5
 8000a60:	80bb      	strh	r3, [r7, #4]
    } else {
      // read position from raspberry pi
    }

    // adjust servo position based on turning direction calculated
    speed = 50;
 8000a62:	2332      	movs	r3, #50	; 0x32
 8000a64:	807b      	strh	r3, [r7, #2]
    direction = 90;
 8000a66:	235a      	movs	r3, #90	; 0x5a
 8000a68:	803b      	strh	r3, [r7, #0]
    lcd_display(mode, freq, speed, direction);// update lcd display (if displaying direction)
 8000a6a:	883b      	ldrh	r3, [r7, #0]
 8000a6c:	887a      	ldrh	r2, [r7, #2]
 8000a6e:	88b9      	ldrh	r1, [r7, #4]
 8000a70:	79f8      	ldrb	r0, [r7, #7]
 8000a72:	f7ff ff55 	bl	8000920 <lcd_display>
    if(mode == 0) {
 8000a76:	e7f4      	b.n	8000a62 <main+0x32>

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b094      	sub	sp, #80	; 0x50
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	2230      	movs	r2, #48	; 0x30
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f002 fa54 	bl	8002f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <SystemClock_Config+0xd0>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <SystemClock_Config+0xd0>)
 8000aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <SystemClock_Config+0xd0>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <SystemClock_Config+0xd4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <SystemClock_Config+0xd4>)
 8000ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <SystemClock_Config+0xd4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	2301      	movs	r3, #1
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aec:	2310      	movs	r3, #16
 8000aee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000af4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000af6:	2304      	movs	r3, #4
 8000af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000afa:	2307      	movs	r3, #7
 8000afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0320 	add.w	r3, r7, #32
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 f9c8 	bl	8001e98 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b0e:	f000 f925 	bl	8000d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	230f      	movs	r3, #15
 8000b14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2302      	movs	r3, #2
 8000b18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fc2a 	bl	8002388 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b3a:	f000 f90f 	bl	8000d5c <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3750      	adds	r7, #80	; 0x50
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40007000 	.word	0x40007000

08000b50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_I2C1_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x58>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b8e:	f000 fd37 	bl	8001600 <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 f8e0 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000040 	.word	0x20000040
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb2:	f107 0320 	add.w	r3, r7, #32
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]
 8000bc8:	611a      	str	r2, [r3, #16]
 8000bca:	615a      	str	r2, [r3, #20]
 8000bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bce:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000bd0:	4a22      	ldr	r2, [pc, #136]	; (8000c5c <MX_TIM3_Init+0xb0>)
 8000bd2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000bd6:	f240 128f 	movw	r2, #399	; 0x18f
 8000bda:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000be4:	22c8      	movs	r2, #200	; 0xc8
 8000be6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bf4:	4818      	ldr	r0, [pc, #96]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000bf6:	f001 fdd3 	bl	80027a0 <HAL_TIM_PWM_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000c00:	f000 f8ac 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c04:	2300      	movs	r3, #0
 8000c06:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	4619      	mov	r1, r3
 8000c12:	4811      	ldr	r0, [pc, #68]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000c14:	f002 f8e2 	bl	8002ddc <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000c1e:	f000 f89d 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c22:	2360      	movs	r3, #96	; 0x60
 8000c24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2204      	movs	r2, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4807      	ldr	r0, [pc, #28]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000c3a:	f001 fe01 	bl	8002840 <HAL_TIM_PWM_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000c44:	f000 f88a 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c48:	4803      	ldr	r0, [pc, #12]	; (8000c58 <MX_TIM3_Init+0xac>)
 8000c4a:	f000 f91f 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000094 	.word	0x20000094
 8000c5c:	40000400 	.word	0x40000400

08000c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	; 0x28
 8000c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a34      	ldr	r2, [pc, #208]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a2d      	ldr	r2, [pc, #180]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b20      	ldr	r3, [pc, #128]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a1f      	ldr	r2, [pc, #124]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b1d      	ldr	r3, [pc, #116]	; (8000d50 <MX_GPIO_Init+0xf0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2120      	movs	r1, #32
 8000cea:	481a      	ldr	r0, [pc, #104]	; (8000d54 <MX_GPIO_Init+0xf4>)
 8000cec:	f000 fc6e 	bl	80015cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <MX_GPIO_Init+0xf8>)
 8000d08:	f000 fadc 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d0c:	230c      	movs	r3, #12
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d1c:	2307      	movs	r3, #7
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	480b      	ldr	r0, [pc, #44]	; (8000d54 <MX_GPIO_Init+0xf4>)
 8000d28:	f000 facc 	bl	80012c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <MX_GPIO_Init+0xf4>)
 8000d44:	f000 fabe 	bl	80012c4 <HAL_GPIO_Init>

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	; 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40020800 	.word	0x40020800

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a0f      	ldr	r2, [pc, #60]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000da6:	2007      	movs	r0, #7
 8000da8:	f000 fa58 	bl	800125c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800

08000db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	; (8000e3c <HAL_I2C_MspInit+0x84>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12c      	bne.n	8000e34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_I2C_MspInit+0x88>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_I2C_MspInit+0x88>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_I2C_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000df6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfc:	2312      	movs	r3, #18
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	480c      	ldr	r0, [pc, #48]	; (8000e44 <HAL_I2C_MspInit+0x8c>)
 8000e14:	f000 fa56 	bl	80012c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_I2C_MspInit+0x88>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_I2C_MspInit+0x88>)
 8000e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e26:	6413      	str	r3, [r2, #64]	; 0x40
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <HAL_I2C_MspInit+0x88>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	3728      	adds	r7, #40	; 0x28
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40005400 	.word	0x40005400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020400 	.word	0x40020400

08000e48 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10d      	bne.n	8000e76 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_TIM_PWM_MspInit+0x40>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_TIM_PWM_MspInit+0x40>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_TIM_PWM_MspInit+0x40>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40000400 	.word	0x40000400
 8000e88:	40023800 	.word	0x40023800

08000e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_TIM_MspPostInit+0x68>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11d      	bne.n	8000eea <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a10      	ldr	r2, [pc, #64]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_TIM_MspPostInit+0x6c>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000eda:	2302      	movs	r3, #2
 8000edc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <HAL_TIM_MspPostInit+0x70>)
 8000ee6:	f000 f9ed 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000eea:	bf00      	nop
 8000eec:	3720      	adds	r7, #32
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40000400 	.word	0x40000400
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40020000 	.word	0x40020000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f890 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <SystemInit+0x20>)
 8000f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5e:	4a05      	ldr	r2, [pc, #20]	; (8000f74 <SystemInit+0x20>)
 8000f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7e:	490e      	ldr	r1, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f80:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f84:	e002      	b.n	8000f8c <LoopCopyDataInit>

08000f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f8a:	3304      	adds	r3, #4

08000f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f90:	d3f9      	bcc.n	8000f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f94:	4c0b      	ldr	r4, [pc, #44]	; (8000fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f98:	e001      	b.n	8000f9e <LoopFillZerobss>

08000f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f9c:	3204      	adds	r2, #4

08000f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fa0:	d3fb      	bcc.n	8000f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fa2:	f7ff ffd7 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f001 ff87 	bl	8002eb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fd41 	bl	8000a30 <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000fb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000fbc:	08003094 	.word	0x08003094
  ldr r2, =_sbss
 8000fc0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000fc4:	200000e0 	.word	0x200000e0

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_Init+0x40>)
 8000fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_Init+0x40>)
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_Init+0x40>)
 8000fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f931 	bl	800125c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff feb2 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023c00 	.word	0x40023c00

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f93b 	bl	80012aa <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f000 f911 	bl	8001272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000010 	.word	0x20000010
 8001068:	20000018 	.word	0x20000018
 800106c:	20000014 	.word	0x20000014

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000018 	.word	0x20000018
 8001094:	200000dc 	.word	0x200000dc

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200000dc 	.word	0x200000dc

080010b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b8:	f7ff ffee 	bl	8001098 <HAL_GetTick>
 80010bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c8:	d005      	beq.n	80010d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ca:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Delay+0x44>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	461a      	mov	r2, r3
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d8f7      	bhi.n	80010d8 <HAL_Delay+0x28>
  {
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000018 	.word	0x20000018

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x44>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3b01      	subs	r3, #1
 8001224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001228:	d301      	bcc.n	800122e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122a:	2301      	movs	r3, #1
 800122c:	e00f      	b.n	800124e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <SysTick_Config+0x40>)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001236:	210f      	movs	r1, #15
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f7ff ff8e 	bl	800115c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <SysTick_Config+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001246:	4b04      	ldr	r3, [pc, #16]	; (8001258 <SysTick_Config+0x40>)
 8001248:	2207      	movs	r2, #7
 800124a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	e000e010 	.word	0xe000e010

0800125c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff47 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001272:	b580      	push	{r7, lr}
 8001274:	b086      	sub	sp, #24
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	60b9      	str	r1, [r7, #8]
 800127c:	607a      	str	r2, [r7, #4]
 800127e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff5c 	bl	8001140 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff8e 	bl	80011b0 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5d 	bl	800115c <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffb0 	bl	8001218 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b089      	sub	sp, #36	; 0x24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	e159      	b.n	8001594 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012e0:	2201      	movs	r2, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	f040 8148 	bne.w	800158e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b01      	cmp	r3, #1
 8001308:	d005      	beq.n	8001316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001312:	2b02      	cmp	r3, #2
 8001314:	d130      	bne.n	8001378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800134c:	2201      	movs	r2, #1
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 0201 	and.w	r2, r3, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b03      	cmp	r3, #3
 8001382:	d017      	beq.n	80013b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	2203      	movs	r2, #3
 8001390:	fa02 f303 	lsl.w	r3, r2, r3
 8001394:	43db      	mvns	r3, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4013      	ands	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d123      	bne.n	8001408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	08da      	lsrs	r2, r3, #3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3208      	adds	r2, #8
 80013c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	691a      	ldr	r2, [r3, #16]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	08da      	lsrs	r2, r3, #3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3208      	adds	r2, #8
 8001402:	69b9      	ldr	r1, [r7, #24]
 8001404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	69fb      	ldr	r3, [r7, #28]
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a2 	beq.w	800158e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	4b57      	ldr	r3, [pc, #348]	; (80015ac <HAL_GPIO_Init+0x2e8>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a56      	ldr	r2, [pc, #344]	; (80015ac <HAL_GPIO_Init+0x2e8>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b54      	ldr	r3, [pc, #336]	; (80015ac <HAL_GPIO_Init+0x2e8>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001466:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_GPIO_Init+0x2ec>)
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	3302      	adds	r3, #2
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	220f      	movs	r2, #15
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a49      	ldr	r2, [pc, #292]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d019      	beq.n	80014c6 <HAL_GPIO_Init+0x202>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a48      	ldr	r2, [pc, #288]	; (80015b8 <HAL_GPIO_Init+0x2f4>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d013      	beq.n	80014c2 <HAL_GPIO_Init+0x1fe>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a47      	ldr	r2, [pc, #284]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00d      	beq.n	80014be <HAL_GPIO_Init+0x1fa>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a46      	ldr	r2, [pc, #280]	; (80015c0 <HAL_GPIO_Init+0x2fc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d007      	beq.n	80014ba <HAL_GPIO_Init+0x1f6>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a45      	ldr	r2, [pc, #276]	; (80015c4 <HAL_GPIO_Init+0x300>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d101      	bne.n	80014b6 <HAL_GPIO_Init+0x1f2>
 80014b2:	2304      	movs	r3, #4
 80014b4:	e008      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014ba:	2303      	movs	r3, #3
 80014bc:	e004      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014be:	2302      	movs	r3, #2
 80014c0:	e002      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x204>
 80014c6:	2300      	movs	r3, #0
 80014c8:	69fa      	ldr	r2, [r7, #28]
 80014ca:	f002 0203 	and.w	r2, r2, #3
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	4093      	lsls	r3, r2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d8:	4935      	ldr	r1, [pc, #212]	; (80015b0 <HAL_GPIO_Init+0x2ec>)
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	089b      	lsrs	r3, r3, #2
 80014de:	3302      	adds	r3, #2
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b38      	ldr	r3, [pc, #224]	; (80015c8 <HAL_GPIO_Init+0x304>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a2f      	ldr	r2, [pc, #188]	; (80015c8 <HAL_GPIO_Init+0x304>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <HAL_GPIO_Init+0x304>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a24      	ldr	r2, [pc, #144]	; (80015c8 <HAL_GPIO_Init+0x304>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800153a:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <HAL_GPIO_Init+0x304>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	43db      	mvns	r3, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4013      	ands	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155e:	4a1a      	ldr	r2, [pc, #104]	; (80015c8 <HAL_GPIO_Init+0x304>)
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <HAL_GPIO_Init+0x304>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d003      	beq.n	8001588 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001588:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <HAL_GPIO_Init+0x304>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3301      	adds	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	2b0f      	cmp	r3, #15
 8001598:	f67f aea2 	bls.w	80012e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3724      	adds	r7, #36	; 0x24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40013800 	.word	0x40013800
 80015b4:	40020000 	.word	0x40020000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40013c00 	.word	0x40013c00

080015cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	807b      	strh	r3, [r7, #2]
 80015d8:	4613      	mov	r3, r2
 80015da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015dc:	787b      	ldrb	r3, [r7, #1]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015e2:	887a      	ldrh	r2, [r7, #2]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e8:	e003      	b.n	80015f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ea:	887b      	ldrh	r3, [r7, #2]
 80015ec:	041a      	lsls	r2, r3, #16
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	619a      	str	r2, [r3, #24]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e12b      	b.n	800186a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff fbc6 	bl	8000db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2224      	movs	r2, #36	; 0x24
 8001630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001664:	f001 f888 	bl	8002778 <HAL_RCC_GetPCLK1Freq>
 8001668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	4a81      	ldr	r2, [pc, #516]	; (8001874 <HAL_I2C_Init+0x274>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d807      	bhi.n	8001684 <HAL_I2C_Init+0x84>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4a80      	ldr	r2, [pc, #512]	; (8001878 <HAL_I2C_Init+0x278>)
 8001678:	4293      	cmp	r3, r2
 800167a:	bf94      	ite	ls
 800167c:	2301      	movls	r3, #1
 800167e:	2300      	movhi	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	e006      	b.n	8001692 <HAL_I2C_Init+0x92>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4a7d      	ldr	r2, [pc, #500]	; (800187c <HAL_I2C_Init+0x27c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	bf94      	ite	ls
 800168c:	2301      	movls	r3, #1
 800168e:	2300      	movhi	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e0e7      	b.n	800186a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4a78      	ldr	r2, [pc, #480]	; (8001880 <HAL_I2C_Init+0x280>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	0c9b      	lsrs	r3, r3, #18
 80016a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_I2C_Init+0x274>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d802      	bhi.n	80016d4 <HAL_I2C_Init+0xd4>
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	3301      	adds	r3, #1
 80016d2:	e009      	b.n	80016e8 <HAL_I2C_Init+0xe8>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016da:	fb02 f303 	mul.w	r3, r2, r3
 80016de:	4a69      	ldr	r2, [pc, #420]	; (8001884 <HAL_I2C_Init+0x284>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	099b      	lsrs	r3, r3, #6
 80016e6:	3301      	adds	r3, #1
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	495c      	ldr	r1, [pc, #368]	; (8001874 <HAL_I2C_Init+0x274>)
 8001704:	428b      	cmp	r3, r1
 8001706:	d819      	bhi.n	800173c <HAL_I2C_Init+0x13c>
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1e59      	subs	r1, r3, #1
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fbb1 f3f3 	udiv	r3, r1, r3
 8001716:	1c59      	adds	r1, r3, #1
 8001718:	f640 73fc 	movw	r3, #4092	; 0xffc
 800171c:	400b      	ands	r3, r1
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00a      	beq.n	8001738 <HAL_I2C_Init+0x138>
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1e59      	subs	r1, r3, #1
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001730:	3301      	adds	r3, #1
 8001732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001736:	e051      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 8001738:	2304      	movs	r3, #4
 800173a:	e04f      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d111      	bne.n	8001768 <HAL_I2C_Init+0x168>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	1e58      	subs	r0, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6859      	ldr	r1, [r3, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	440b      	add	r3, r1
 8001752:	fbb0 f3f3 	udiv	r3, r0, r3
 8001756:	3301      	adds	r3, #1
 8001758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800175c:	2b00      	cmp	r3, #0
 800175e:	bf0c      	ite	eq
 8001760:	2301      	moveq	r3, #1
 8001762:	2300      	movne	r3, #0
 8001764:	b2db      	uxtb	r3, r3
 8001766:	e012      	b.n	800178e <HAL_I2C_Init+0x18e>
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	1e58      	subs	r0, r3, #1
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6859      	ldr	r1, [r3, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	0099      	lsls	r1, r3, #2
 8001778:	440b      	add	r3, r1
 800177a:	fbb0 f3f3 	udiv	r3, r0, r3
 800177e:	3301      	adds	r3, #1
 8001780:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf0c      	ite	eq
 8001788:	2301      	moveq	r3, #1
 800178a:	2300      	movne	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_I2C_Init+0x196>
 8001792:	2301      	movs	r3, #1
 8001794:	e022      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10e      	bne.n	80017bc <HAL_I2C_Init+0x1bc>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e58      	subs	r0, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6859      	ldr	r1, [r3, #4]
 80017a6:	460b      	mov	r3, r1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	440b      	add	r3, r1
 80017ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b0:	3301      	adds	r3, #1
 80017b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017ba:	e00f      	b.n	80017dc <HAL_I2C_Init+0x1dc>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1e58      	subs	r0, r3, #1
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6859      	ldr	r1, [r3, #4]
 80017c4:	460b      	mov	r3, r1
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	0099      	lsls	r1, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80017d2:	3301      	adds	r3, #1
 80017d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017dc:	6879      	ldr	r1, [r7, #4]
 80017de:	6809      	ldr	r1, [r1, #0]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69da      	ldr	r2, [r3, #28]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800180a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6911      	ldr	r1, [r2, #16]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	68d2      	ldr	r2, [r2, #12]
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6812      	ldr	r2, [r2, #0]
 800181c:	430b      	orrs	r3, r1
 800181e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2220      	movs	r2, #32
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	000186a0 	.word	0x000186a0
 8001878:	001e847f 	.word	0x001e847f
 800187c:	003d08ff 	.word	0x003d08ff
 8001880:	431bde83 	.word	0x431bde83
 8001884:	10624dd3 	.word	0x10624dd3

08001888 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	461a      	mov	r2, r3
 8001894:	460b      	mov	r3, r1
 8001896:	817b      	strh	r3, [r7, #10]
 8001898:	4613      	mov	r3, r2
 800189a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff fbfc 	bl	8001098 <HAL_GetTick>
 80018a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b20      	cmp	r3, #32
 80018ac:	f040 80e0 	bne.w	8001a70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2319      	movs	r3, #25
 80018b6:	2201      	movs	r2, #1
 80018b8:	4970      	ldr	r1, [pc, #448]	; (8001a7c <HAL_I2C_Master_Transmit+0x1f4>)
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 f964 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
 80018c8:	e0d3      	b.n	8001a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_I2C_Master_Transmit+0x50>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e0cc      	b.n	8001a72 <HAL_I2C_Master_Transmit+0x1ea>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d007      	beq.n	80018fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2221      	movs	r2, #33	; 0x21
 8001912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2210      	movs	r2, #16
 800191a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	893a      	ldrh	r2, [r7, #8]
 800192e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001934:	b29a      	uxth	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4a50      	ldr	r2, [pc, #320]	; (8001a80 <HAL_I2C_Master_Transmit+0x1f8>)
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001940:	8979      	ldrh	r1, [r7, #10]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	6a3a      	ldr	r2, [r7, #32]
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f89c 	bl	8001a84 <I2C_MasterRequestWrite>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e08d      	b.n	8001a72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800196c:	e066      	b.n	8001a3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	6a39      	ldr	r1, [r7, #32]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f9de 	bl	8001d34 <I2C_WaitOnTXEFlagUntilTimeout>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00d      	beq.n	800199a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2b04      	cmp	r3, #4
 8001984:	d107      	bne.n	8001996 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001994:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e06b      	b.n	8001a72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	781a      	ldrb	r2, [r3, #0]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	f003 0304 	and.w	r3, r3, #4
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d11b      	bne.n	8001a10 <HAL_I2C_Master_Transmit+0x188>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d017      	beq.n	8001a10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e4:	781a      	ldrb	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	6a39      	ldr	r1, [r7, #32]
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	f000 f9ce 	bl	8001db6 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00d      	beq.n	8001a3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d107      	bne.n	8001a38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e01a      	b.n	8001a72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d194      	bne.n	800196e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2220      	movs	r2, #32
 8001a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e000      	b.n	8001a72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a70:	2302      	movs	r3, #2
  }
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	00100002 	.word	0x00100002
 8001a80:	ffff0000 	.word	0xffff0000

08001a84 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	460b      	mov	r3, r1
 8001a92:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a98:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d006      	beq.n	8001aae <I2C_MasterRequestWrite+0x2a>
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d003      	beq.n	8001aae <I2C_MasterRequestWrite+0x2a>
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aac:	d108      	bne.n	8001ac0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e00b      	b.n	8001ad8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	2b12      	cmp	r3, #18
 8001ac6:	d107      	bne.n	8001ad8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ad6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f84f 	bl	8001b88 <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00d      	beq.n	8001b0c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001afe:	d103      	bne.n	8001b08 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e035      	b.n	8001b78 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b14:	d108      	bne.n	8001b28 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	e01b      	b.n	8001b60 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	11db      	asrs	r3, r3, #7
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f003 0306 	and.w	r3, r3, #6
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f063 030f 	orn	r3, r3, #15
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	490e      	ldr	r1, [pc, #56]	; (8001b80 <I2C_MasterRequestWrite+0xfc>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f000 f875 	bl	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e010      	b.n	8001b78 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b56:	897b      	ldrh	r3, [r7, #10]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <I2C_MasterRequestWrite+0x100>)
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f000 f865 	bl	8001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e000      	b.n	8001b78 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	00010008 	.word	0x00010008
 8001b84:	00010002 	.word	0x00010002

08001b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b98:	e025      	b.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba0:	d021      	beq.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ba2:	f7ff fa79 	bl	8001098 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d302      	bcc.n	8001bb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d116      	bne.n	8001be6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	f043 0220 	orr.w	r2, r3, #32
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e023      	b.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d10d      	bne.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	e00c      	b.n	8001c26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	699b      	ldr	r3, [r3, #24]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf0c      	ite	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	2300      	movne	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d0b6      	beq.n	8001b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b084      	sub	sp, #16
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c44:	e051      	b.n	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c54:	d123      	bne.n	8001c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f043 0204 	orr.w	r2, r3, #4
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e046      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca4:	d021      	beq.n	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7ff f9f7 	bl	8001098 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d302      	bcc.n	8001cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d116      	bne.n	8001cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f043 0220 	orr.w	r2, r3, #32
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e020      	b.n	8001d2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d10c      	bne.n	8001d0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	e00b      	b.n	8001d26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	43da      	mvns	r2, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d18d      	bne.n	8001c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d40:	e02d      	b.n	8001d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f000 f878 	bl	8001e38 <I2C_IsAcknowledgeFailed>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e02d      	b.n	8001dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d021      	beq.n	8001d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d5a:	f7ff f99d 	bl	8001098 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	68ba      	ldr	r2, [r7, #8]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d302      	bcc.n	8001d70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d116      	bne.n	8001d9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2200      	movs	r2, #0
 8001d74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2220      	movs	r2, #32
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f043 0220 	orr.w	r2, r3, #32
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2200      	movs	r2, #0
 8001d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e007      	b.n	8001dae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da8:	2b80      	cmp	r3, #128	; 0x80
 8001daa:	d1ca      	bne.n	8001d42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	60f8      	str	r0, [r7, #12]
 8001dbe:	60b9      	str	r1, [r7, #8]
 8001dc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dc2:	e02d      	b.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f837 	bl	8001e38 <I2C_IsAcknowledgeFailed>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e02d      	b.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dda:	d021      	beq.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ddc:	f7ff f95c 	bl	8001098 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d302      	bcc.n	8001df2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d116      	bne.n	8001e20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f043 0220 	orr.w	r2, r3, #32
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e007      	b.n	8001e30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d1ca      	bne.n	8001dc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e4e:	d11b      	bne.n	8001e88 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e58:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	f043 0204 	orr.w	r2, r3, #4
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e267      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d075      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb6:	4b88      	ldr	r3, [pc, #544]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	d00c      	beq.n	8001edc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec2:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d112      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ece:	4b82      	ldr	r3, [pc, #520]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ed6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eda:	d10b      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	4b7e      	ldr	r3, [pc, #504]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d05b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x108>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d157      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e242      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001efc:	d106      	bne.n	8001f0c <HAL_RCC_OscConfig+0x74>
 8001efe:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a75      	ldr	r2, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e01d      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f14:	d10c      	bne.n	8001f30 <HAL_RCC_OscConfig+0x98>
 8001f16:	4b70      	ldr	r3, [pc, #448]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6f      	ldr	r2, [pc, #444]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	4b6d      	ldr	r3, [pc, #436]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a6c      	ldr	r2, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	e00b      	b.n	8001f48 <HAL_RCC_OscConfig+0xb0>
 8001f30:	4b69      	ldr	r3, [pc, #420]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a68      	ldr	r2, [pc, #416]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b66      	ldr	r3, [pc, #408]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a65      	ldr	r2, [pc, #404]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d013      	beq.n	8001f78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7ff f8a2 	bl	8001098 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f58:	f7ff f89e 	bl	8001098 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	; 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e207      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b5b      	ldr	r3, [pc, #364]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0xc0>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff f88e 	bl	8001098 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f80:	f7ff f88a 	bl	8001098 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	; 0x64
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e1f3      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f92:	4b51      	ldr	r3, [pc, #324]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0xe8>
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d063      	beq.n	8002076 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fba:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc2:	2b08      	cmp	r3, #8
 8001fc4:	d11c      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d116      	bne.n	8002000 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e1c7      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fea:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4937      	ldr	r1, [pc, #220]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffe:	e03a      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002008:	4b34      	ldr	r3, [pc, #208]	; (80020dc <HAL_RCC_OscConfig+0x244>)
 800200a:	2201      	movs	r2, #1
 800200c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200e:	f7ff f843 	bl	8001098 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002016:	f7ff f83f 	bl	8001098 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b02      	cmp	r3, #2
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e1a8      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4925      	ldr	r1, [pc, #148]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e015      	b.n	8002076 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_OscConfig+0x244>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7ff f822 	bl	8001098 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002058:	f7ff f81e 	bl	8001098 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e187      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206a:	4b1b      	ldr	r3, [pc, #108]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d036      	beq.n	80020f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d016      	beq.n	80020b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <HAL_RCC_OscConfig+0x248>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002090:	f7ff f802 	bl	8001098 <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002098:	f7fe fffe 	bl	8001098 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e167      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x240>)
 80020ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0f0      	beq.n	8002098 <HAL_RCC_OscConfig+0x200>
 80020b6:	e01b      	b.n	80020f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_OscConfig+0x248>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020be:	f7fe ffeb 	bl	8001098 <HAL_GetTick>
 80020c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	e00e      	b.n	80020e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c6:	f7fe ffe7 	bl	8001098 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d907      	bls.n	80020e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e150      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
 80020d8:	40023800 	.word	0x40023800
 80020dc:	42470000 	.word	0x42470000
 80020e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e4:	4b88      	ldr	r3, [pc, #544]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80020e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ea      	bne.n	80020c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 8097 	beq.w	800222c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020fe:	2300      	movs	r3, #0
 8002100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002102:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10f      	bne.n	800212e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b7d      	ldr	r3, [pc, #500]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4a7c      	ldr	r2, [pc, #496]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211c:	6413      	str	r3, [r2, #64]	; 0x40
 800211e:	4b7a      	ldr	r3, [pc, #488]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212a:	2301      	movs	r3, #1
 800212c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212e:	4b77      	ldr	r3, [pc, #476]	; (800230c <HAL_RCC_OscConfig+0x474>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002136:	2b00      	cmp	r3, #0
 8002138:	d118      	bne.n	800216c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213a:	4b74      	ldr	r3, [pc, #464]	; (800230c <HAL_RCC_OscConfig+0x474>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a73      	ldr	r2, [pc, #460]	; (800230c <HAL_RCC_OscConfig+0x474>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002146:	f7fe ffa7 	bl	8001098 <HAL_GetTick>
 800214a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	e008      	b.n	8002160 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214e:	f7fe ffa3 	bl	8001098 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b02      	cmp	r3, #2
 800215a:	d901      	bls.n	8002160 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e10c      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b6a      	ldr	r3, [pc, #424]	; (800230c <HAL_RCC_OscConfig+0x474>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0f0      	beq.n	800214e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d106      	bne.n	8002182 <HAL_RCC_OscConfig+0x2ea>
 8002174:	4b64      	ldr	r3, [pc, #400]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a63      	ldr	r2, [pc, #396]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x324>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x30c>
 800218a:	4b5f      	ldr	r3, [pc, #380]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218e:	4a5e      	ldr	r2, [pc, #376]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	; 0x70
 8002196:	4b5c      	ldr	r3, [pc, #368]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x324>
 80021a4:	4b58      	ldr	r3, [pc, #352]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a8:	4a57      	ldr	r2, [pc, #348]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	; 0x70
 80021b0:	4b55      	ldr	r3, [pc, #340]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe ff68 	bl	8001098 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe ff64 	bl	8001098 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e0cb      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e2:	4b49      	ldr	r3, [pc, #292]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ee      	beq.n	80021cc <HAL_RCC_OscConfig+0x334>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f0:	f7fe ff52 	bl	8001098 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe ff4e 	bl	8001098 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e0b5      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220e:	4b3e      	ldr	r3, [pc, #248]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221a:	7dfb      	ldrb	r3, [r7, #23]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d105      	bne.n	800222c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	4a38      	ldr	r2, [pc, #224]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80a1 	beq.w	8002378 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002236:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	f003 030c 	and.w	r3, r3, #12
 800223e:	2b08      	cmp	r3, #8
 8002240:	d05c      	beq.n	80022fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d141      	bne.n	80022ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b31      	ldr	r3, [pc, #196]	; (8002310 <HAL_RCC_OscConfig+0x478>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002250:	f7fe ff22 	bl	8001098 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe ff1e 	bl	8001098 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e087      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b27      	ldr	r3, [pc, #156]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002284:	019b      	lsls	r3, r3, #6
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228c:	085b      	lsrs	r3, r3, #1
 800228e:	3b01      	subs	r3, #1
 8002290:	041b      	lsls	r3, r3, #16
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	061b      	lsls	r3, r3, #24
 800229a:	491b      	ldr	r1, [pc, #108]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x478>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe fef7 	bl	8001098 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe fef3 	bl	8001098 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e05c      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x416>
 80022cc:	e054      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_RCC_OscConfig+0x478>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fee0 	bl	8001098 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022dc:	f7fe fedc 	bl	8001098 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e045      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_RCC_OscConfig+0x470>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x444>
 80022fa:	e03d      	b.n	8002378 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d107      	bne.n	8002314 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e038      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
 8002308:	40023800 	.word	0x40023800
 800230c:	40007000 	.word	0x40007000
 8002310:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002314:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCC_OscConfig+0x4ec>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d028      	beq.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d121      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d11a      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800234a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800234c:	4293      	cmp	r3, r2
 800234e:	d111      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	085b      	lsrs	r3, r3, #1
 800235c:	3b01      	subs	r3, #1
 800235e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d107      	bne.n	8002374 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d001      	beq.n	8002378 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3718      	adds	r7, #24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0cc      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800239c:	4b68      	ldr	r3, [pc, #416]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d90c      	bls.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b65      	ldr	r3, [pc, #404]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b2:	4b63      	ldr	r3, [pc, #396]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0b8      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d020      	beq.n	8002412 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f4:	4b53      	ldr	r3, [pc, #332]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	4a52      	ldr	r2, [pc, #328]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002400:	4b50      	ldr	r3, [pc, #320]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	494d      	ldr	r1, [pc, #308]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d044      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b47      	ldr	r3, [pc, #284]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d119      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e07f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d003      	beq.n	8002446 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b3b      	ldr	r3, [pc, #236]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e067      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b37      	ldr	r3, [pc, #220]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4934      	ldr	r1, [pc, #208]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fe0e 	bl	8001098 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fe0a 	bl	8001098 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e04f      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2b      	ldr	r3, [pc, #172]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d20c      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	b2d2      	uxtb	r2, r2
 80024bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024be:	4b20      	ldr	r3, [pc, #128]	; (8002540 <HAL_RCC_ClockConfig+0x1b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0307 	and.w	r3, r3, #7
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d001      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e032      	b.n	8002536 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d008      	beq.n	80024ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024dc:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	490e      	ldr	r1, [pc, #56]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 800250a:	4313      	orrs	r3, r2
 800250c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800250e:	f000 f821 	bl	8002554 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490a      	ldr	r1, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	fa22 f303 	lsr.w	r3, r2, r3
 8002526:	4a09      	ldr	r2, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252a:	4b09      	ldr	r3, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fd6e 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40023c00 	.word	0x40023c00
 8002544:	40023800 	.word	0x40023800
 8002548:	08003044 	.word	0x08003044
 800254c:	20000010 	.word	0x20000010
 8002550:	20000014 	.word	0x20000014

08002554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002558:	b094      	sub	sp, #80	; 0x50
 800255a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800255c:	2300      	movs	r3, #0
 800255e:	647b      	str	r3, [r7, #68]	; 0x44
 8002560:	2300      	movs	r3, #0
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002564:	2300      	movs	r3, #0
 8002566:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800256c:	4b79      	ldr	r3, [pc, #484]	; (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d00d      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x40>
 8002578:	2b08      	cmp	r3, #8
 800257a:	f200 80e1 	bhi.w	8002740 <HAL_RCC_GetSysClockFreq+0x1ec>
 800257e:	2b00      	cmp	r3, #0
 8002580:	d002      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x34>
 8002582:	2b04      	cmp	r3, #4
 8002584:	d003      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x3a>
 8002586:	e0db      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002588:	4b73      	ldr	r3, [pc, #460]	; (8002758 <HAL_RCC_GetSysClockFreq+0x204>)
 800258a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800258c:	e0db      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800258e:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_GetSysClockFreq+0x208>)
 8002590:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002592:	e0d8      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002594:	4b6f      	ldr	r3, [pc, #444]	; (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800259c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800259e:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025aa:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	2200      	movs	r2, #0
 80025b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025bc:	633b      	str	r3, [r7, #48]	; 0x30
 80025be:	2300      	movs	r3, #0
 80025c0:	637b      	str	r3, [r7, #52]	; 0x34
 80025c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025c6:	4622      	mov	r2, r4
 80025c8:	462b      	mov	r3, r5
 80025ca:	f04f 0000 	mov.w	r0, #0
 80025ce:	f04f 0100 	mov.w	r1, #0
 80025d2:	0159      	lsls	r1, r3, #5
 80025d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d8:	0150      	lsls	r0, r2, #5
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4621      	mov	r1, r4
 80025e0:	1a51      	subs	r1, r2, r1
 80025e2:	6139      	str	r1, [r7, #16]
 80025e4:	4629      	mov	r1, r5
 80025e6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f8:	4659      	mov	r1, fp
 80025fa:	018b      	lsls	r3, r1, #6
 80025fc:	4651      	mov	r1, sl
 80025fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002602:	4651      	mov	r1, sl
 8002604:	018a      	lsls	r2, r1, #6
 8002606:	4651      	mov	r1, sl
 8002608:	ebb2 0801 	subs.w	r8, r2, r1
 800260c:	4659      	mov	r1, fp
 800260e:	eb63 0901 	sbc.w	r9, r3, r1
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800261e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002622:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002626:	4690      	mov	r8, r2
 8002628:	4699      	mov	r9, r3
 800262a:	4623      	mov	r3, r4
 800262c:	eb18 0303 	adds.w	r3, r8, r3
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	462b      	mov	r3, r5
 8002634:	eb49 0303 	adc.w	r3, r9, r3
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002646:	4629      	mov	r1, r5
 8002648:	024b      	lsls	r3, r1, #9
 800264a:	4621      	mov	r1, r4
 800264c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002650:	4621      	mov	r1, r4
 8002652:	024a      	lsls	r2, r1, #9
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265a:	2200      	movs	r2, #0
 800265c:	62bb      	str	r3, [r7, #40]	; 0x28
 800265e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002664:	f7fd fdb6 	bl	80001d4 <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002670:	e058      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002672:	4b38      	ldr	r3, [pc, #224]	; (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	099b      	lsrs	r3, r3, #6
 8002678:	2200      	movs	r2, #0
 800267a:	4618      	mov	r0, r3
 800267c:	4611      	mov	r1, r2
 800267e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	2300      	movs	r3, #0
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
 8002688:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800268c:	4642      	mov	r2, r8
 800268e:	464b      	mov	r3, r9
 8002690:	f04f 0000 	mov.w	r0, #0
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	0159      	lsls	r1, r3, #5
 800269a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800269e:	0150      	lsls	r0, r2, #5
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4641      	mov	r1, r8
 80026a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026aa:	4649      	mov	r1, r9
 80026ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c4:	ebb2 040a 	subs.w	r4, r2, sl
 80026c8:	eb63 050b 	sbc.w	r5, r3, fp
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	00eb      	lsls	r3, r5, #3
 80026d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026da:	00e2      	lsls	r2, r4, #3
 80026dc:	4614      	mov	r4, r2
 80026de:	461d      	mov	r5, r3
 80026e0:	4643      	mov	r3, r8
 80026e2:	18e3      	adds	r3, r4, r3
 80026e4:	603b      	str	r3, [r7, #0]
 80026e6:	464b      	mov	r3, r9
 80026e8:	eb45 0303 	adc.w	r3, r5, r3
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fa:	4629      	mov	r1, r5
 80026fc:	028b      	lsls	r3, r1, #10
 80026fe:	4621      	mov	r1, r4
 8002700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002704:	4621      	mov	r1, r4
 8002706:	028a      	lsls	r2, r1, #10
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800270e:	2200      	movs	r2, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	61fa      	str	r2, [r7, #28]
 8002714:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002718:	f7fd fd5c 	bl	80001d4 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4613      	mov	r3, r2
 8002722:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_GetSysClockFreq+0x200>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002734:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetSysClockFreq+0x204>)
 8002742:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002748:	4618      	mov	r0, r3
 800274a:	3750      	adds	r7, #80	; 0x50
 800274c:	46bd      	mov	sp, r7
 800274e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	00f42400 	.word	0x00f42400
 800275c:	007a1200 	.word	0x007a1200

08002760 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002764:	4b03      	ldr	r3, [pc, #12]	; (8002774 <HAL_RCC_GetHCLKFreq+0x14>)
 8002766:	681b      	ldr	r3, [r3, #0]
}
 8002768:	4618      	mov	r0, r3
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	20000010 	.word	0x20000010

08002778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800277c:	f7ff fff0 	bl	8002760 <HAL_RCC_GetHCLKFreq>
 8002780:	4602      	mov	r2, r0
 8002782:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	0a9b      	lsrs	r3, r3, #10
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	4903      	ldr	r1, [pc, #12]	; (800279c <HAL_RCC_GetPCLK1Freq+0x24>)
 800278e:	5ccb      	ldrb	r3, [r1, r3]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002794:	4618      	mov	r0, r3
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	08003054 	.word	0x08003054

080027a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e041      	b.n	8002836 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d106      	bne.n	80027cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7fe fb3e 	bl	8000e48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f000 f8f0 	bl	80029c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002856:	2b01      	cmp	r3, #1
 8002858:	d101      	bne.n	800285e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800285a:	2302      	movs	r3, #2
 800285c:	e0ae      	b.n	80029bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	f200 809f 	bhi.w	80029ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800286e:	a201      	add	r2, pc, #4	; (adr r2, 8002874 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002874:	080028a9 	.word	0x080028a9
 8002878:	080029ad 	.word	0x080029ad
 800287c:	080029ad 	.word	0x080029ad
 8002880:	080029ad 	.word	0x080029ad
 8002884:	080028e9 	.word	0x080028e9
 8002888:	080029ad 	.word	0x080029ad
 800288c:	080029ad 	.word	0x080029ad
 8002890:	080029ad 	.word	0x080029ad
 8002894:	0800292b 	.word	0x0800292b
 8002898:	080029ad 	.word	0x080029ad
 800289c:	080029ad 	.word	0x080029ad
 80028a0:	080029ad 	.word	0x080029ad
 80028a4:	0800296b 	.word	0x0800296b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 f908 	bl	8002ac4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0208 	orr.w	r2, r2, #8
 80028c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0204 	bic.w	r2, r2, #4
 80028d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6999      	ldr	r1, [r3, #24]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	619a      	str	r2, [r3, #24]
      break;
 80028e6:	e064      	b.n	80029b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f94e 	bl	8002b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6999      	ldr	r1, [r3, #24]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	021a      	lsls	r2, r3, #8
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	619a      	str	r2, [r3, #24]
      break;
 8002928:	e043      	b.n	80029b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68b9      	ldr	r1, [r7, #8]
 8002930:	4618      	mov	r0, r3
 8002932:	f000 f999 	bl	8002c68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69da      	ldr	r2, [r3, #28]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f042 0208 	orr.w	r2, r2, #8
 8002944:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0204 	bic.w	r2, r2, #4
 8002954:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69d9      	ldr	r1, [r3, #28]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	61da      	str	r2, [r3, #28]
      break;
 8002968:	e023      	b.n	80029b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68b9      	ldr	r1, [r7, #8]
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f9e3 	bl	8002d3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	69da      	ldr	r2, [r3, #28]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69d9      	ldr	r1, [r3, #28]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	021a      	lsls	r2, r3, #8
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	61da      	str	r2, [r3, #28]
      break;
 80029aa:	e002      	b.n	80029b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	75fb      	strb	r3, [r7, #23]
      break;
 80029b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a34      	ldr	r2, [pc, #208]	; (8002aa8 <TIM_Base_SetConfig+0xe4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00f      	beq.n	80029fc <TIM_Base_SetConfig+0x38>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d00b      	beq.n	80029fc <TIM_Base_SetConfig+0x38>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a31      	ldr	r2, [pc, #196]	; (8002aac <TIM_Base_SetConfig+0xe8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <TIM_Base_SetConfig+0x38>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <TIM_Base_SetConfig+0xec>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_Base_SetConfig+0x38>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a2f      	ldr	r2, [pc, #188]	; (8002ab4 <TIM_Base_SetConfig+0xf0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d108      	bne.n	8002a0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a25      	ldr	r2, [pc, #148]	; (8002aa8 <TIM_Base_SetConfig+0xe4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01b      	beq.n	8002a4e <TIM_Base_SetConfig+0x8a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d017      	beq.n	8002a4e <TIM_Base_SetConfig+0x8a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a22      	ldr	r2, [pc, #136]	; (8002aac <TIM_Base_SetConfig+0xe8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <TIM_Base_SetConfig+0x8a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a21      	ldr	r2, [pc, #132]	; (8002ab0 <TIM_Base_SetConfig+0xec>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00f      	beq.n	8002a4e <TIM_Base_SetConfig+0x8a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <TIM_Base_SetConfig+0xf0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d00b      	beq.n	8002a4e <TIM_Base_SetConfig+0x8a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <TIM_Base_SetConfig+0xf4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d007      	beq.n	8002a4e <TIM_Base_SetConfig+0x8a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <TIM_Base_SetConfig+0xf8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d003      	beq.n	8002a4e <TIM_Base_SetConfig+0x8a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <TIM_Base_SetConfig+0xfc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	68fa      	ldr	r2, [r7, #12]
 8002a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a08      	ldr	r2, [pc, #32]	; (8002aa8 <TIM_Base_SetConfig+0xe4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d103      	bne.n	8002a94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	615a      	str	r2, [r3, #20]
}
 8002a9a:	bf00      	nop
 8002a9c:	3714      	adds	r7, #20
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800
 8002ab4:	40000c00 	.word	0x40000c00
 8002ab8:	40014000 	.word	0x40014000
 8002abc:	40014400 	.word	0x40014400
 8002ac0:	40014800 	.word	0x40014800

08002ac4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b087      	sub	sp, #28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	f023 0201 	bic.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0303 	bic.w	r3, r3, #3
 8002afa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f023 0302 	bic.w	r3, r3, #2
 8002b0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <TIM_OC1_SetConfig+0xc8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d10c      	bne.n	8002b3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f023 0308 	bic.w	r3, r3, #8
 8002b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a13      	ldr	r2, [pc, #76]	; (8002b8c <TIM_OC1_SetConfig+0xc8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d111      	bne.n	8002b66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685a      	ldr	r2, [r3, #4]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	621a      	str	r2, [r3, #32]
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40010000 	.word	0x40010000

08002b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b087      	sub	sp, #28
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f023 0210 	bic.w	r2, r3, #16
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f023 0320 	bic.w	r3, r3, #32
 8002bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <TIM_OC2_SetConfig+0xd4>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d10d      	bne.n	8002c0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <TIM_OC2_SetConfig+0xd4>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d113      	bne.n	8002c3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68fa      	ldr	r2, [r7, #12]
 8002c46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685a      	ldr	r2, [r3, #4]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40010000 	.word	0x40010000

08002c68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68fa      	ldr	r2, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	021b      	lsls	r3, r3, #8
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <TIM_OC3_SetConfig+0xd0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d10d      	bne.n	8002ce2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	021b      	lsls	r3, r3, #8
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a14      	ldr	r2, [pc, #80]	; (8002d38 <TIM_OC3_SetConfig+0xd0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d113      	bne.n	8002d12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	621a      	str	r2, [r3, #32]
}
 8002d2c:	bf00      	nop
 8002d2e:	371c      	adds	r7, #28
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	40010000 	.word	0x40010000

08002d3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b087      	sub	sp, #28
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	031b      	lsls	r3, r3, #12
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <TIM_OC4_SetConfig+0x9c>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d109      	bne.n	8002db0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	019b      	lsls	r3, r3, #6
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40010000 	.word	0x40010000

08002ddc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d101      	bne.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002df0:	2302      	movs	r3, #2
 8002df2:	e050      	b.n	8002e96 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d018      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d013      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a18      	ldr	r2, [pc, #96]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d00e      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d009      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d004      	beq.n	8002e6a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d10c      	bne.n	8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	40010000 	.word	0x40010000
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800
 8002eb0:	40000c00 	.word	0x40000c00
 8002eb4:	40014000 	.word	0x40014000

08002eb8 <__libc_init_array>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4d0d      	ldr	r5, [pc, #52]	; (8002ef0 <__libc_init_array+0x38>)
 8002ebc:	4c0d      	ldr	r4, [pc, #52]	; (8002ef4 <__libc_init_array+0x3c>)
 8002ebe:	1b64      	subs	r4, r4, r5
 8002ec0:	10a4      	asrs	r4, r4, #2
 8002ec2:	2600      	movs	r6, #0
 8002ec4:	42a6      	cmp	r6, r4
 8002ec6:	d109      	bne.n	8002edc <__libc_init_array+0x24>
 8002ec8:	4d0b      	ldr	r5, [pc, #44]	; (8002ef8 <__libc_init_array+0x40>)
 8002eca:	4c0c      	ldr	r4, [pc, #48]	; (8002efc <__libc_init_array+0x44>)
 8002ecc:	f000 f87c 	bl	8002fc8 <_init>
 8002ed0:	1b64      	subs	r4, r4, r5
 8002ed2:	10a4      	asrs	r4, r4, #2
 8002ed4:	2600      	movs	r6, #0
 8002ed6:	42a6      	cmp	r6, r4
 8002ed8:	d105      	bne.n	8002ee6 <__libc_init_array+0x2e>
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
 8002edc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee0:	4798      	blx	r3
 8002ee2:	3601      	adds	r6, #1
 8002ee4:	e7ee      	b.n	8002ec4 <__libc_init_array+0xc>
 8002ee6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eea:	4798      	blx	r3
 8002eec:	3601      	adds	r6, #1
 8002eee:	e7f2      	b.n	8002ed6 <__libc_init_array+0x1e>
 8002ef0:	0800308c 	.word	0x0800308c
 8002ef4:	0800308c 	.word	0x0800308c
 8002ef8:	0800308c 	.word	0x0800308c
 8002efc:	08003090 	.word	0x08003090

08002f00 <__itoa>:
 8002f00:	1e93      	subs	r3, r2, #2
 8002f02:	2b22      	cmp	r3, #34	; 0x22
 8002f04:	b510      	push	{r4, lr}
 8002f06:	460c      	mov	r4, r1
 8002f08:	d904      	bls.n	8002f14 <__itoa+0x14>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	700b      	strb	r3, [r1, #0]
 8002f0e:	461c      	mov	r4, r3
 8002f10:	4620      	mov	r0, r4
 8002f12:	bd10      	pop	{r4, pc}
 8002f14:	2a0a      	cmp	r2, #10
 8002f16:	d109      	bne.n	8002f2c <__itoa+0x2c>
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	da07      	bge.n	8002f2c <__itoa+0x2c>
 8002f1c:	232d      	movs	r3, #45	; 0x2d
 8002f1e:	700b      	strb	r3, [r1, #0]
 8002f20:	4240      	negs	r0, r0
 8002f22:	2101      	movs	r1, #1
 8002f24:	4421      	add	r1, r4
 8002f26:	f000 f80d 	bl	8002f44 <__utoa>
 8002f2a:	e7f1      	b.n	8002f10 <__itoa+0x10>
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	e7f9      	b.n	8002f24 <__itoa+0x24>

08002f30 <itoa>:
 8002f30:	f7ff bfe6 	b.w	8002f00 <__itoa>

08002f34 <memset>:
 8002f34:	4402      	add	r2, r0
 8002f36:	4603      	mov	r3, r0
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d100      	bne.n	8002f3e <memset+0xa>
 8002f3c:	4770      	bx	lr
 8002f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f42:	e7f9      	b.n	8002f38 <memset+0x4>

08002f44 <__utoa>:
 8002f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f46:	4c1f      	ldr	r4, [pc, #124]	; (8002fc4 <__utoa+0x80>)
 8002f48:	b08b      	sub	sp, #44	; 0x2c
 8002f4a:	4605      	mov	r5, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	466e      	mov	r6, sp
 8002f50:	f104 0c20 	add.w	ip, r4, #32
 8002f54:	6820      	ldr	r0, [r4, #0]
 8002f56:	6861      	ldr	r1, [r4, #4]
 8002f58:	4637      	mov	r7, r6
 8002f5a:	c703      	stmia	r7!, {r0, r1}
 8002f5c:	3408      	adds	r4, #8
 8002f5e:	4564      	cmp	r4, ip
 8002f60:	463e      	mov	r6, r7
 8002f62:	d1f7      	bne.n	8002f54 <__utoa+0x10>
 8002f64:	7921      	ldrb	r1, [r4, #4]
 8002f66:	7139      	strb	r1, [r7, #4]
 8002f68:	1e91      	subs	r1, r2, #2
 8002f6a:	6820      	ldr	r0, [r4, #0]
 8002f6c:	6038      	str	r0, [r7, #0]
 8002f6e:	2922      	cmp	r1, #34	; 0x22
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	d904      	bls.n	8002f80 <__utoa+0x3c>
 8002f76:	7019      	strb	r1, [r3, #0]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	b00b      	add	sp, #44	; 0x2c
 8002f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f80:	1e58      	subs	r0, r3, #1
 8002f82:	4684      	mov	ip, r0
 8002f84:	fbb5 f7f2 	udiv	r7, r5, r2
 8002f88:	fb02 5617 	mls	r6, r2, r7, r5
 8002f8c:	3628      	adds	r6, #40	; 0x28
 8002f8e:	446e      	add	r6, sp
 8002f90:	460c      	mov	r4, r1
 8002f92:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002f96:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002f9a:	462e      	mov	r6, r5
 8002f9c:	42b2      	cmp	r2, r6
 8002f9e:	f101 0101 	add.w	r1, r1, #1
 8002fa2:	463d      	mov	r5, r7
 8002fa4:	d9ee      	bls.n	8002f84 <__utoa+0x40>
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	545a      	strb	r2, [r3, r1]
 8002faa:	1919      	adds	r1, r3, r4
 8002fac:	1aa5      	subs	r5, r4, r2
 8002fae:	42aa      	cmp	r2, r5
 8002fb0:	dae3      	bge.n	8002f7a <__utoa+0x36>
 8002fb2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002fb6:	780e      	ldrb	r6, [r1, #0]
 8002fb8:	7006      	strb	r6, [r0, #0]
 8002fba:	3201      	adds	r2, #1
 8002fbc:	f801 5901 	strb.w	r5, [r1], #-1
 8002fc0:	e7f4      	b.n	8002fac <__utoa+0x68>
 8002fc2:	bf00      	nop
 8002fc4:	0800305c 	.word	0x0800305c

08002fc8 <_init>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr

08002fd4 <_fini>:
 8002fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd6:	bf00      	nop
 8002fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fda:	bc08      	pop	{r3}
 8002fdc:	469e      	mov	lr, r3
 8002fde:	4770      	bx	lr
